import numpy as np
import tkinter as tk

key = '2D55'
key_extra = '3D69'
key_extra_ = '3D79'
text = 'Hello World'
s_box = {
    '0': '4', '1': 'E', '2': 'B', '3': 'D',
    '4': '9', '5': '8', '6': 'F', '7': 'A',
    '8': '0', '9': '6', 'A': '2', 'B': 'C',
    'C': '7', 'D': '1', 'E': '5', 'F': '3'
}

inv_s_box = {
    '4': '0', 'E': '1', 'B': '2', 'D': '3',
    '9': '4', '8': '5', 'F': '6', 'A': '7',
    '0': '8', '6': '9', '2': 'A', 'C': 'B',
    '7': 'C', '1': 'D', '5': 'E', '3': 'F'
}


def ASCII(x):
    """将字符转换为二进制"""
    return format(ord(x), 'X').zfill(4)


def UTF(x):
    """将二进制转换为字符"""
    return chr(int(x, 16))


def confuse(a, b):
    """列混淆乘法"""
    mul_table = [
        ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
        ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"],
        ["0", "2", "4", "6", "8", "A", "C", "E", "3", "1", "7", "5", "B", "9", "F", "D"],
        ["0", "3", "6", "5", "C", "F", "A", "9", "B", "8", "D", "E", "7", "4", "1", "2"],
        ["0", "4", "8", "C", "3", "7", "B", "F", "6", "2", "E", "A", "5", "1", "D", "9"],
        ["0", "5", "A", "F", "7", "2", "D", "8", "E", "B", "4", "1", "9", "C", "3", "6"],
        ["0", "6", "C", "A", "B", "D", "7", "1", "5", "3", "9", "F", "E", "8", "2", "4"],
        ["0", "7", "E", "9", "F", "8", "1", "6", "D", "A", "3", "4", "2", "5", "C", "B"],
        ["0", "8", "3", "B", "6", "E", "5", "D", "C", "4", "F", "7", "A", "2", "9", "1"],
        ["0", "9", "1", "8", "2", "B", "3", "A", "4", "D", "5", "C", "6", "F", "7", "E"],
        ["0", "A", "7", "D", "E", "4", "9", "3", "F", "5", "8", "2", "1", "B", "6", "C"],
        ["0", "B", "5", "E", "A", "1", "F", "4", "7", "C", "2", "9", "D", "6", "8", "3"],
        ["0", "C", "B", "7", "5", "9", "E", "2", "A", "6", "1", "D", "F", "3", "4", "8"],
        ["0", "D", "9", "4", "1", "C", "8", "5", "2", "F", "B", "6", "3", "E", "A", "7"],
        ["0", "E", "F", "1", "A", "3", "2", "C", "9", "7", "6", "8", "4", "D", "B", "5"],
        ["0", "F", "D", "2", "9", "6", "4", "B", "1", "E", "C", "3", "8", "7", "5", "A"]
    ]
    return mul_table[a][b]


def Ak(text, key):
    """密钥加"""
    temp = ''
    for i in range(0, 4):
        temp += str(format(int(key[i], 16) ^ int(text[i], 16), 'X'))
    return temp


def NS(n):
    """半字节代替"""
    # print(n)
    temp = ""
    for i in n:
        # print(i)
        temp += str(s_box[i])
    return temp


def inv_NS(n):
    """半字节代替"""
    # print(n)
    temp = ""
    for i in n:
        # print(i)
        temp += str(inv_s_box[i])
    return temp


def line_exchange(n):
    """行移位"""
    temp = ''
    temp += n[0]
    temp += n[1]
    temp += n[3]
    temp += n[2]
    return temp


def column_exchange(n):
    """列混淆"""
    A = '1441'
    B = n
    temp = ""
    # print(confuse(int(A[0], 16), int(B[0], 16)) ^ confuse(int(A[1], 16), int(B[2], 16)), 1111)
    temp += str(
        format(int(confuse(int(A[0], 16), int(B[0], 16)), 16) ^ int(confuse(int(A[1], 16), int(B[2], 16)), 16), 'X'))
    temp += str(
        format(int(confuse(int(A[0], 16), int(B[1], 16)), 16) ^ int(confuse(int(A[1], 16), int(B[3], 16)), 16), 'X'))
    temp += str(
        format(int(confuse(int(A[2], 16), int(B[0], 16)), 16) ^ int(confuse(int(A[3], 16), int(B[2], 16)), 16), 'X'))
    temp += str(
        format(int(confuse(int(A[2], 16), int(B[1], 16)), 16) ^ int(confuse(int(A[3], 16), int(B[3], 16)), 16), 'X'))
    return temp


def inv_column_exchange(n):
    """逆列混淆"""
    A = '9229'
    B = n
    temp = ""
    # print(confuse(int(A[0], 16), int(B[0], 16)) ^ confuse(int(A[1], 16), int(B[2], 16)), 1111)
    temp += str(
        format(int(confuse(int(A[0], 16), int(B[0], 16)), 16) ^ int(confuse(int(A[1], 16), int(B[2], 16)), 16), 'X'))
    temp += str(
        format(int(confuse(int(A[0], 16), int(B[1], 16)), 16) ^ int(confuse(int(A[1], 16), int(B[3], 16)), 16), 'X'))
    temp += str(
        format(int(confuse(int(A[2], 16), int(B[0], 16)), 16) ^ int(confuse(int(A[3], 16), int(B[2], 16)), 16), 'X'))
    temp += str(
        format(int(confuse(int(A[2], 16), int(B[1], 16)), 16) ^ int(confuse(int(A[3], 16), int(B[3], 16)), 16), 'X'))
    return temp


def key_extend(n, i):
    """密钥扩展"""
    w_0 = ''
    w_1 = ''
    w_1_s = ''
    RC_1 = '10000000'
    RC_2 = '00110000'
    if i == 1:
        RC = RC_1
    else:
        RC = RC_2
    w_0 = w_0 + n[0] + n[1]
    w_1 = w_1 + n[3] + n[2]
    # print(w_0, w_1)
    for i in w_1:
        w_1_s += s_box[i]
    # print(w_0)
    w_2 = bin(int(w_0, 16) ^ int(w_1_s, 16) ^ int(RC, 2))[2:].zfill(8)
    w_3 = bin(int(w_2, 2) ^ int(w_1, 16))[2:].zfill(8)
    key_new = w_2 + w_3
    key_new = format(int(key_new, 2), 'X').zfill(4)
    return key_new


key_1 = key_extend(key, 1)  # 密钥扩展
key_2 = key_extend(key, 2)  # 密钥扩展
key_1_extra = key_extend(key_extra, 1)  # 密钥扩展
key_2_extra = key_extend(key_extra, 2)  # 密钥扩展
key_1_extra_ = key_extend(key_extra_, 1)  # 密钥扩展
key_2_extra_ = key_extend(key_extra_, 2)  # 密钥扩展


def encrypt(text, key):
    text_new = Ak(text, key)  # 密钥加
    text_new = NS(text_new)  # 半字节代替
    text_new = line_exchange(text_new)  # 行移位
    text_new = column_exchange(text_new)  # 列混淆
    key_1 = key_extend(key, 1)  # 密钥扩展
    # print(key_1)
    text_new = Ak(text_new, key_1)  # 密钥轮加
    text_new = NS(text_new)  # 半字节代替
    text_new = line_exchange(text_new)  # 行移位
    key_2 = key_extend(key, 2)  # 密钥扩展
    text_new = Ak(text_new, key_2)
    return text_new


def decrypt(text, key, key_1, key_2):
    text_new = Ak(text, key_2)
    text_new = line_exchange(text_new)
    text_new = inv_NS(text_new)
    text_new = Ak(text_new, key_1)
    text_new = inv_column_exchange(text_new)
    text_new = line_exchange(text_new)
    text_new = inv_NS(text_new)
    text_new = Ak(text_new, key)
    return text_new


def on_brute_force(text_true, text_fake):
    text_middle_1 = {}
    text_middle_2 = {}
    for i in range(65536):
        key_middle_1 = format(i, 'X').zfill(4)
        key_1_ = key_extend(key_middle_1, 1)
        key_2_ = key_extend(key_middle_1, 2)
        # print(key_middle_1)

        text_encrypt = ""
        text_decrypt = ''

        for j in text_true:
            text_j = ASCII(j)
            text_new = encrypt(text_j, key_middle_1)
            text_encrypt += (UTF(text_new))
        text_middle_1[i] = text_encrypt

        for j in text_fake:
            text_new = decrypt(ASCII(j), key_middle_1, key_1_, key_2_)
            text_decrypt += (UTF(text_new))
        text_middle_2[i] = text_decrypt

    for i in range(65536):
        for j in range(65536):
            if text_middle_1[i] == text_middle_2[j]:
                # print(format(i, 'X').zfill(4), format(j, 'X').zfill(4))
                print(f"得到密码：{format(i, 'X').zfill(4), format(j, 'X').zfill(4)}")
    # print(text_middle_1)
    # print(text_middle_2)


text_encrypt = ""
text_decrypt = ""
for i in text:
    text_i = ASCII(i)
    text_new = encrypt(text_i, key)
    text_new = encrypt(text_new, key_extra)
    text_new = encrypt(text_new, key_extra_)
    text_encrypt += (UTF(text_new))
print(text_encrypt)
for i in text_encrypt:
    text_new = decrypt(ASCII(i), key_extra_, key_1_extra_, key_2_extra_)
    text_new = decrypt(text_new, key_extra, key_1_extra, key_2_extra)
    text_new = decrypt(text_new, key, key_1, key_2)
    text_decrypt += (UTF(text_new))
print(text_decrypt)
# a = '7D4F'
# b = '6C29'
# c = encrypt(a, b)
# print(f"原文：{a};密文：{c}")
# print(decrypt(text_new, key, key_1, key_2))
# print(line_exchange(NS(str(text))))
# print(column_exchange(line_exchange(NS(str(text)))))
# print(key_extend(key, 1))
# on_brute_force(text, text_encrypt)
def on_encrypt():
    """加密操作"""
    text = entry.get("1.0", "end-1c")
    text_encrypt = ''
    for i in text:
        text_i = ASCII(i)
        text_new = encrypt(text_i, key)
        text_new = encrypt(text_new, key_extra)
        text_encrypt += (UTF(text_new))
    encrypted = text_encrypt
    result_label.config(text=f"Encrypted: {encrypted}")


def on_decrypt():
    """解密操作"""
    text = entry.get("1.0", "end-1c")
    text_decrypt = ''
    for i in text:
        text_new = decrypt(ASCII(i), key_extra, key_1_extra, key_2_extra)
        text_new = decrypt(text_new, key, key_1, key_2)
        text_decrypt += (UTF(text_new))
    decrypted = text_decrypt
    result_label.config(text=f"Decrypted: {decrypted}")

# 创建主窗口
root = tk.Tk()
root.title("Encryption/Decryption Tool")

# 创建文本输入框
entry = tk.Text(root, height=10, width=50)
entry.pack(pady=10)

# 创建加密按钮
encrypt_button = tk.Button(root, text="Encrypt", command=on_encrypt)
encrypt_button.pack(side=tk.LEFT, padx=10)

# 创建解密按钮
decrypt_button = tk.Button(root, text="Decrypt", command=on_decrypt)
decrypt_button.pack(side=tk.LEFT, padx=10)


# # 创建暴力破解按钮
# brute_force_button = tk.Button(root, text="Brute Force", command=lambda: on_brute_force(entry.get("1.0", "end-1c")))
# brute_force_button.pack(side=tk.LEFT, padx=10)

# 暴力破解操作
# 创建结果显示标签
result_label = tk.Label(root, text="Results will appear here")
result_label.pack(pady=10)

# 运行主循环
root.mainloop()
